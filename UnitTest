# Name: Recursion Unit Test
# Time: 3.3.2023 @ 7:52 am

# Helper Functions
import operator as op
import traceback
from datetime import datetime

eq_comp = op.__eq__
is_comp = op.is_

def perm_eq(p1, p2):
    if not isinstance(p1, str) or not isinstance(p2, str):
        return False
    def to_dct(perm):
        split_perm = perm[1:len(perm)-1].split(')(')
        dct = {}
        for chunk in split_perm:
            n = len(chunk)
            for i in range(n):
                if i < n - 1:
                    dct[chunk[i]] = chunk[i+1]
                else:
                    dct[chunk[i]] = chunk[0]
        return dct
    return(to_dct(p1) == to_dct(p2))

def elems_comp(a_list, b_list):
    # Return true if every element of a is an element of b and vice versa, False otherwise
    if not isinstance(a_list, list) or not isinstance(b_list, list):
        return False
    for elem in a_list:
        if elem not in b_list:
            return False
    for elem in b_list:
        if elem not in b_list:
            return False
    return True

def order_comp(a_list, b_list):
    for i in range(len(a_list)):
        try:
            if a_list[i] != b_list[i]:
                return False
        except:
            return False
    return True

def eq_not_is(an_obj, another_obj):
    return (an_obj == another_obj) and not(an_obj is another_obj)

def approx_eq(expected, actual):
    if isinstance(expected, (int, float, complex)):
        if not isinstance(actual, (int, float, complex)):
            return False
        return abs(expected - actual) < 0.000001
    return False

def build_arg_str(args, is_poly):
    arg_str = ""
    if is_poly:
        for arg in args:
            if callable(arg):
                arg_str = arg_str + arg.__name__ + " "
            else:
                if isinstance(arg, str):
                    arg_str = arg_str + "'" + arg + "'" + " "
                else:
                    arg_str = arg_str + str(arg) + " "
    else:
        if callable(args):
            arg_str = args.__name__
        else:
            if isinstance(args, str):
                arg_str = "'" + args + "'"
            else:
                arg_str = str(args)
    return arg_str.strip()

class Unit():

    def __init__(self, func, name, cases, is_polyadic, is_mutator, test_type, extra_credit = False):
        # If the function is polyadic, we need to * the input so that it unpacks.
        # If the function is a mutator, we don't ask for its return value.
        # Instead we compare the input after the function is called to the correct mutated value.
        # Six test types are required:
        # 1. Verify equality of value: eq_comp
        # 2. Verify identity: is_comp
        # 3. Verify equality of value and non-identity: eq_not_is
        # 4. Verify that two lists have the same elements, order irrelevant: elems_comp
        # 5. Verify that two lists have same elements in same order: order_comp
        # 6. Verify that two floats are close enough: approx_eq
        self.func = func
        self.name = name
        self.cases = cases
        self.is_polyadic = is_polyadic
        self.is_mutator = is_mutator
        self.test_type = test_type
        self.score = 0
        self.extra_credit = extra_credit

    def add_test(self, new_test):
        self.cases.append(new_test)

class UnitTest():

    def __init__(self, name, units):
        self.name = name
        self.units = units
        self.score = 0
        self.num_tests = 0

    def run_test(self):
        test_file = open("report.txt", "w")
        test_file.write(self.name + "\n")
        now = datetime.now()
        dt_string = now.strftime("Date: %m/%d/%Y, Time: %H:%M:%S")
        test_file.write(dt_string + "\n")
        total_score = 0
        pts_lost_dict = {}
        for unit in self.units:
            pts_lost_dict[unit.name] = 0
            if unit.extra_credit:
                header_str = "\nFunction: \"" + unit.name + "\"" + "(extra credit)\n"
            else:
                header_str = "\nFunction: \"" + unit.name + "\"\n"
            test_file.write(header_str)
            for case in unit.cases:
                if not unit.extra_credit:
                    self.num_tests += 1
                arg = case[0]
                expected_value = case[1]
                arg_str = build_arg_str(arg, unit.is_polyadic)
                test_file.write("Argument(s): " + arg_str + "  ")
                # Now flush the contents of the write buffer so that if a function hangs,
                # the report will show precisely where it happened.
                test_file.flush()
                try:
                    if unit.is_polyadic:
                        actual_value = unit.func(*arg)
                    else:
                        actual_value = unit.func(arg) 
                except Exception as err:
                    # Do not print error if function hasn't been implemented (no arguments defined but passing args error).
					# This avoids giving students a wall of errors when starting project.
                    if "takes 0 positional arguments but" not in str(err):
                        # Print error to console
                        traceback.print_exc()
                    test_file.write("Crash! No points!\n")
                    pts_lost_dict[unit.name] += 1
                else:
                    if not unit.is_mutator:
                        if unit.test_type(expected_value, actual_value):
                            test_file.write("  Return value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect return value! No point!\n")
                            pts_lost_dict[unit.name] += 1
                    else:
                        if unit.is_polyadic:
                            mutated_value = arg[0]
                        else:
                            mutated_value = arg
                        if unit.test_type(expected_value, mutated_value):
                            test_file.write("  Mutated value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect mutated value! No point!\n")
                            pts_lost_dict[unit.name] += 1

            total_score += unit.score

        self.score = total_score
        test_file.write("\nSummary:")
        if self.score < self.num_tests:
            for name in pts_lost_dict:
                pts_lost = pts_lost_dict[name]
                if pts_lost > 0:
                    test_file.write("\nFunction \"" + name + "\", points lost " + str(pts_lost) + ".")
        else:
            test_file.write(" Perfection!")
        summary = "Final Score: " + str(self.score) + "/" + str(self.num_tests)
        test_file.write("\n\n" + summary)
        print(summary)

# Test Cases (tc)
# Format: a list of tuples where each tuple
# gives an argument (or set of arguments)
# and the expected return for that argument.

sum_of_tc = [([1], 1),
             ([-125, 33, -126, 66, -66, 136, 30, -21, 26, -49, 114, 16, -31, 16, 139, 63, -136, -142, 127, -23, -32, 117, 15, 85], 232)
             ]
product_of_tc = [([1], 1),
                 ([-125, 33, -126, 66, -66, 136, 30, -21, 26, -49, 114, 16, -31, 16, 139, 63, -136, -142, 127, -23, -32, 117, 15, 85], 527227372337384679231777569554563072000000)
                 ]
find_min_tc = [([1], 1),
               ([-125, 33, -126, 66, -66, 136, 30, -21, 26, -49, 114, 16, -31, 16, 139, 63, -136, -142, 127, -23, -32, 117, 15, 85], -142)
               ]
find_max_tc = [([1], 1),
               ([-125, 33, -126, 66, -66, 136, 30, -21, 26, -49, 114, 16, -31, 16, 139, 63, -136, -142, 127, -23, -32, 117, 15, 85], 139)
               ]
reverse_tc = [([], []),
              ([1], [1]),
              ([-125, 33, -126, 66, -66, 136, 30, -21, 26, -49, 114, 16, -31, 16, 139, 63, -136, -142, 127, -23, -32, 117, 15, 85], [85, 15, 117, -32, -23, 127, -142, -136, 63, 139, 16, -31, 16, 114, -49, 26, -21, 30, 136, -66, 66, -126, 33, -125])
              ]
tri_num_tc = [(1, 1),
              (2, 3),
              (144, 10440)
              ]
fib_tc = [(1, 1),
          (2, 1),
          (3, 2),
          (4, 3),
          (5, 5),
          (6, 8),
          (17, 1597)
          ]
fast_fib_tc = [(123, 22698374052006863956975682),
               (1, 1),
               (2, 1)]

gcf_tc = [((1, 1), 1),
          ((12, 15), 3),
          ((1260, 25740), 180)
          ]
pt_row_tc = [(1, [1]),
             (2, [1, 1]),
             (3, [1, 2, 1]),
             (17, [1, 16, 120, 560, 1820, 4368, 8008, 11440, 12870, 11440, 8008, 4368, 1820, 560, 120, 16, 1])
             ]
prime_factorization_tc = [(2, [2]),
                          (12, [2, 2, 3]),
                          (12345678987654321, [3, 3, 3, 3, 37, 37, 333667, 333667])
                          ]
bracket_purge_tc = [([], []),
                    ([[]], []),
                    ([[3], [], 'a'], [3, 'a'])
                    ]
qsort_tc = [([1], [1]),
            ([3, 1, 2, 5, 0, 4], [0, 1, 2, 3, 4, 5]),
            ([-1205, 1209, -1105, -1345, 1365, 1623, 736, -430, -1275], [-1345, -1275, -1205, -1105, -430, 736, 1209, 1365, 1623]),
            (['dog', 'cat', 'owl', 'pig', 'rat', 'bird', 'mouse'], ['bird', 'cat', 'dog', 'mouse', 'owl', 'pig', 'rat'])
            ]
bchop_tc = [(([1], 1), True),
            (([2], 1), False),
            (([-125, 33, -126, 66, -66, 136, 30, -21, 26, -49, 114, 16, -31, 16, 139, 63, -136, -142, 127, -23, -32, 117, 15, 85], -66), True),
            (([-125, 33, -126, 66, -66, 136, 30, -21, 26, -49, 114, 16, -31, 16, 139, 63, -136, -142, 127, -23, -32, 117, 15, 85], 12), False)
            ]
L = []
I = [3, 1, 2, 5, 0, 4]
Iq = [0, 1, 2, 3, 4, 5]  # I sorted
S = [-1205, 1209, -1105, -1345, 1365, 1623, 736, -430, -1275]
Sq = [-1345, -1275, -1205, -1105, -430, 736, 1209, 1365, 1623]  # S sorted
mqsort_tc = [(L, L), (I, Iq), (S, Sq)]

# Create Units
# This block will cause a crash if you haven't created all of the required functions.
# Format: Unit(func, cases, is_polyadic, test_type)

sum_of_unit = Unit(sum_of, "sum_of", sum_of_tc, False, False, eq_comp)
product_of_unit = Unit(product_of, "product_of", product_of_tc, False, False, eq_comp)
find_min_unit = Unit(find_min, "find_min", find_min_tc, False, False, eq_comp)
find_max_unit = Unit(find_max, "find_max", find_max_tc, False, False, eq_comp)
reverse_unit = Unit(reverse, "reverse", reverse_tc, False, False, eq_comp)
tri_num_unit = Unit(tri_num, "tri_num", tri_num_tc, False, False, eq_comp)
fib_unit = Unit(fib, "Fibonacci", fib_tc, False, False, eq_comp)
fast_fib_unit = Unit(fast_fib, "fast Fibonacci", fast_fib_tc, False, False, eq_comp)
gcf_unit = Unit(gcf, "gcf", gcf_tc, True, False, eq_comp)
pt_row_unit = Unit(pt_row, "pt_row", pt_row_tc, False, False, eq_comp)
prime_factorization_unit = Unit(prime_factorization, "prime_factorization", prime_factorization_tc, False, False, eq_comp)
bracket_purge_unit = Unit(bracket_purge, "bracket_purge", bracket_purge_tc, False,  False, eq_comp)
qsort_unit = Unit(qsort, "qsort", qsort_tc, False, False, eq_comp)
bchop_unit = Unit(bchop, "bchop", bchop_tc, True, False, eq_comp)
mqsort_unit = Unit(mqsort, "mqsort", mqsort_tc, False, True, eq_comp)

# Unit Test List
units = [sum_of_unit, product_of_unit, find_min_unit, find_max_unit, reverse_unit, tri_num_unit,
         fib_unit, fast_fib_unit, gcf_unit, pt_row_unit, prime_factorization_unit, bracket_purge_unit,
         qsort_unit, bchop_unit, mqsort_unit]

# Create Unit Test
recursion_unit_test = UnitTest("Recursion Unit Test Final", units)

# Test!
recursion_unit_test.run_test()
